7. 	Write a program for error detecting code using CRC-CCITT (16- bits).
#include<stdio.h>
#include<string.h>
#define n  strlen(g)
char t[128],cs[128],g[]="10001000000100001";
int a,e,c,p;
void xor()
{
for(c=1;c<n;c++)
cs[c]=((cs[c]==g[c])?'0':'1');
}
void crc()
{
for(e=0;e<n;e++)
cs[e]=t[e];
do{
if(cs[0]=='1')
xor();
for(c=0;c<n-1;c++)
cs[c]=cs[c+1];
cs[c]=t[e++];
}
while(e<=a+n-1);
}
int main()
{
int b=0;
printf("enter the message in binary num");
scanf("%s",t);
printf("\n generating polynimial:%s",g);
a=strlen(t);
for(e=a;e<a+n-1;e++)
t[e]='0';
printf("\n modified msg t[e] is :%s",t);
crc();
printf("\n the source crc is :%s",cs);
for(e=a;e<a+n-1;e++)
t[e]=cs[e-a];
printf("\n transmitted msg is %s",t);
printf("\n test error detection 0(yes)/1(no)?");
scanf("%d",&e);
if(e==0)
{
printf("enter position where error is to inserted");
scanf("%d",&e);
t[e]=((t[e]=='0')?'1':'0');
printf("errorneous data:%s\n",t);
}
crc();
for(e=0;(e<n-1)&&(cs[e]!='1');e++);
if(e<n-1)
printf("error detected");
else
printf("no error detected");
return 0;
}

OUTPUT :
CC crc.c
./a.out

OUTPUT 1:
enter the message in binary num1101

 generating polynimial:10001000000100001
 modified msg t[e] is :11010000000000000000
 the source crc is :1101000110101101
 transmitted msg is 11011101000110101101
 test error detection 0(yes)/1(no)?0
enter position where error is to inserted1
errorneous data:10011101000110101101

OUTPUT 2:
enter the message in binary num1101
 generating polynimial:10001000000100001
 modified msg t[e] is :11010000000000000000
 the source crc is :1101000110101101
 transmitted msg is 11011101000110101101
 test error detection 0(yes)/1(no)?1



8. 	Write a program for distance vector algorithm to find suitable path for transmission.
#include<stdio.h>
int min(int a,int b)
{
return(a<b?a:b);
}
void dist(int p[10][10],int n)
{
int i,j,k;
for(k=1;k<=n;k++)
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
p[i][j]=min(p[i][j],p[i][k]+p[k][j]);
}
int main()
{
int a[10][10],i,j,n,flag;
printf("\n enter the number of nodes:\n");
scanf("%d",&n);
printf("\n enter the matrix 0 for self and 999 for no path\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
scanf("%d",&a[i][j]);
for(i=1;i<=n;i++)
{
printf("initial record of %d node is:\n",i);
for(j=1;j<=n;j++)
printf("%d to %d is %d \n",i,j,a[i][j]);
}
dist(a,n);
for(i=1;i<=n;i++)
{
printf("\nupdate record of %d node is:\n",i);
for(j=1;j<=n;j++)
printf("%d to %d is %d \n",i,j,a[i][j]);
}
do
{
 printf("\nenter 0 for shortest path or 1 to exit\n");
 scanf("%d",&flag);
 if(flag==0)
 {
 printf("\nenter the source and destination nodes\n");
 scanf("%d %d",&i,&j);
 printf("%d to %d is %d",i,j,a[i][j]);
 }
 else
 break;
 }
 while(flag!=1);
 exit(0);
}

OUTPUT :
CC dva.c
./a.out

Enter the number of nodes:
4
Enter matrix 0 for self and 999 for no path
0	999	3	999
2	0	999	999
999	7	0	1
6	999	999	0
Initial record of 1 node is:
1 to 1 is 0
1 to 2 is 999
1 to 3 is 3
1 to 4 is 999
Initial record of 2 node is:
2 to 1 is 2
2 to 2 is 0
2 to 3 is 999
2 to 4 is 999
Initial record of 3 node is:
3 to 1 is 999
3 to 2 is 7
3 to 3 is 0
3 to 4 is 1
Initial record of 4 node is:
4 to 1 is 6
4 to 2 is 999
4 to 3 is 999
4 to 4 is 0
updated record of 1 node is:
1 to 1 is 0
1 to 2 is 10
1 to 3 is 3
1 to 4 is 4
updated record of 2 node is:
2 to 1 is 2
2 to 2 is 0
2 to 3 is 5
2 to 4 is 6
updated record of 3 node is:
3 to 1 is 7
3 to 2 is 7
3 to 3 is 0
3 to 4 is 1
updated record of 4 node is:
4 to 1 is 6
4 to 2 is 16
4 to 3 is 9
4 to 4 is 0
Enter 0 for shortest path or 1 to exit :
0
Enter the source and destination nodes :
4
4
4 to 4 is 0
Enter 0 for shortest path or 1 to exit :
0
Enter the source and destination nodes :
4
2
4 to 2 is 16
Enter 0 for shortest path or 1 to exit :
1

 









11. 	Write a program for simple RSA algorithm to encrypt and decrypt the data.
#include<stdio.h>
#include<string.h>
typedef unsigned int uint;
uint gcd(uint x,uint y)
{	
return y==0? x:gcd(y,x%y);	
}

uint multi(uint txt, uint ed, uint n)
{	
uint i,rem=1;
for(i=1; i<=ed; i++)	
rem=(rem*txt)%n;
return rem;
}
short prime(uint no)
{	
uint i;
for(i=2; i<=no/2; i++)
if(no%i==0) return 1;
return 0;
}
int main()
{ 	
char msg[100];
uint pt[100],ct[100],n,d,e,p,q,z,i,len;
do
{
printf("\nEnter 2 large prime numbers p & q:\n");
scanf("%d %d",&p,&q);
}while(prime(p) || prime(q));
n=p*q;
z=(p-1)*(q-1);
do
{	
printf("\nEnter prime value of e relative to %d(z):",z);
scanf("%d",&e);
}while(gcd(e,z)!=1 || e>n); 
for(d=2;d<z;d++)
if((e*d)%z == 1)
break;
printf("Enter the Message\n");	
scanf("%s", msg);
len=strlen(msg);
printf("ASCII value of the given msg is:");
for(i=0;i<len;i++)			
{	
pt[i]=msg[i];
printf("%d\t", pt[i]);}
printf("\n Cipher Text=");
for(i=0;i<len;i++)			
printf("%d\t",ct[i]=multi(pt[i],e,n));
printf("\n Plain Text=");printf("%s",msg);	
}

OUTPUT : 
Enter 2 large prime numbers p & q:
17
19
Enter prime value of e relative to :
13
Enter the Message
ncet
ASCII value of the given msg is:
Plain Text=ncet



12. 	Write a program for congestion control using leaky bucket algorithm.

#include<stdio.h> 
#include<stdlib.h> 
int op,i,packets[5],bucketsize; 
void bktinput(int a,int b) 
{ 
if(a>bucketsize) 
printf("\n\t\t bucket overflow\n"); 
else 
{ 
while(a>b) 
{ 
printf("\n\t\t %d bytes outputed",b); 
a-=b; 
} 
if(a>0) 
printf("\n\t\t last %d bytes sent",a); 
printf("\n\t\t leaky bucket successful\n"); 
} 
} 
int main() 
{ 
printf("enter the bucket size:"); 
scanf("%d",&bucketsize); 
printf("enter the output rate:"); 
scanf("%d",&op); 
printf("enter 5  packets in streams:"); 
for(i=0;i<5;i++) 
scanf("%d",&packets[i]); 
for(i=0;i<5;i++) 
{ 
printf("\n packet no=%d\t packet size=%d",i,packets[i]); 
bktinput(packets[i],op); 
} 
} 







OUTPUT :
cc  leaky.c
./a.out 

enter the bucket size:30
enter the output rate:10
enter 5  packets in streams:
25
26
17
8
2

 packet no=0	 packet size=25
		 10 bytes outputed
		 10 bytes outputed
		 last 5 bytes sent
		 leaky bucket successful

 packet no=1	 packet size=26
		 10 bytes outputed
		 10 bytes outputed
		 last 6 bytes sent
		 leaky bucket successful

 packet no=2	 packet size=17
		 10 bytes outputed
		 last 7 bytes sent
		 leaky bucket successful

 packet no=3	 packet size=8
		 last 8 bytes sent
		 leaky bucket successful

 packet no=4	 packet size=2
		 last 2 bytes sent
		 leaky bucket successful

